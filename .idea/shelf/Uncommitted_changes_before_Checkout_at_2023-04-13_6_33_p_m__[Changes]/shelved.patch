Index: src/main/ui/GuiOpeningAnalyzer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport javax.swing.*;\r\n\r\nimport model.Game;\r\nimport model.GameList;\r\nimport persistence.JsonReader;\r\nimport persistence.JsonWriter;\r\nimport model.Event;\r\nimport model.EventLog;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.util.LinkedList;\r\n\r\n// EFFECTS: runs the GUI of the project. creates important objects that is used by the project\r\npublic class GuiOpeningAnalyzer extends JFrame implements ActionListener {\r\n\r\n\r\n    private static final String JSON_STORE = \"./data/myFile.json\";\r\n    private JsonWriter jsonWriter;\r\n    private JsonReader jsonReader;\r\n\r\n    private GameList gl;\r\n    private Game game;\r\n    private String color;\r\n    private String myOpening;\r\n    private String theirOpening;\r\n    private String result;\r\n    int removingNumber;\r\n\r\n    JFrame frame = new JFrame(\"Opening Analyzer\");\r\n    JPanel panel = new JPanel();\r\n    JLabel colorLabel = new JLabel(\"which color did you play as?\");\r\n    JLabel currentColor = new JLabel(\"none\");\r\n    JLabel currentResult = new JLabel(\"none\");\r\n    JLabel myOpeningLabel = new JLabel(\"what opening did you play?\");\r\n    JLabel theirOpeningLabel = new JLabel(\"what opening did your opponent play?\");\r\n    JLabel resultLabel = new JLabel(\"Did you win, lose, or draw?\");\r\n    JLabel message = new JLabel();\r\n    JLabel amountOfGames = new JLabel();\r\n    JPanel gamesPanel = new JPanel();\r\n\r\n    DefaultListModel<String> l1 = new DefaultListModel<>();\r\n    JList<String> myGamelist;\r\n\r\n    ImageIcon chessImage;\r\n\r\n    JButton whitebutton = new JButton(new AbstractAction(\"White\") {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            color = \"white\";\r\n            currentColor.setText(color);\r\n        }\r\n    });\r\n    JButton blackbutton = new JButton(new AbstractAction(\"Black\") {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            color = \"black\";\r\n            currentColor.setText(color);\r\n        }\r\n    });\r\n\r\n    JButton wonbutton = new JButton(new AbstractAction(\"Won\") {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            result = \"won\";\r\n            currentResult.setText(result);\r\n        }\r\n    });\r\n    JButton lostbutton = new JButton(new AbstractAction(\"Lost\") {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            result = \"lost\";\r\n            currentResult.setText(result);\r\n        }\r\n    });\r\n    JButton drewbutton = new JButton(new AbstractAction(\"Drew\") {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            result = \"drew\";\r\n            currentResult.setText(result);\r\n        }\r\n    });\r\n\r\n    JButton confirmbutton = new JButton(new AbstractAction(\"Confirm\") {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            confirmAction();\r\n        }\r\n    });\r\n\r\n\r\n    JTextField inputMyOpening = new JTextField(30);\r\n    JTextField inputTheirOpening = new JTextField(30);\r\n\r\n    JLabel removeLabel = new JLabel(\"Remove games:\");\r\n    JButton removebutton = new JButton(new AbstractAction(\"Remove Games\") {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            confirmRemove();\r\n        }\r\n    });\r\n\r\n    JTextField removeText = new JTextField();\r\n    JLabel message2 = new JLabel();\r\n\r\n    //EFFECTS: constructor for gui. Sets up gamelist, frame, json, and implements popup window for saving data.\r\n    public GuiOpeningAnalyzer() {\r\n        gl = new GameList(\"Users' Games\");\r\n        frame.setSize(900, 900);\r\n        frame.setResizable(false);\r\n\r\n        jsonWriter = new JsonWriter(JSON_STORE);\r\n        jsonReader = new JsonReader(JSON_STORE);\r\n\r\n        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n        frame.addWindowListener(new WindowAdapter() {\r\n            public void windowClosing(WindowEvent we) {\r\n                int result = JOptionPane.showConfirmDialog(frame,\r\n                        \"Do you want to save before exiting?\", \"Save before close?\",\r\n                        JOptionPane.YES_NO_OPTION);\r\n                if (result == JOptionPane.YES_OPTION) {\r\n                    saveGameList();\r\n                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n                    printLog(EventLog.getInstance());\r\n                } else if (result == JOptionPane.NO_OPTION) {\r\n                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n                    printLog(EventLog.getInstance());\r\n                }\r\n            }\r\n        });\r\n        rungui();\r\n    }\r\n\r\n    // EFFECTS: Runs the important methods that all implement the gui.\r\n    public void rungui() {\r\n        colorStuff();\r\n        openingStuff();\r\n        resultStuff();\r\n        removeStuff();\r\n        imageStuff();\r\n\r\n        confirmbutton.setBounds(200, 300, 80, 35);\r\n        confirmbutton.addActionListener(this);\r\n        message.setBounds(2, 320, 200, 20);\r\n        startUp();\r\n\r\n    }\r\n\r\n    //EFFECTS: implements popup window for loading data.\r\n    public void startUp() {\r\n        int result = JOptionPane.showConfirmDialog(frame,\r\n                \"Do you want to load your games?\", \"Load games?\",\r\n                JOptionPane.YES_NO_OPTION);\r\n        if (result == JOptionPane.YES_OPTION) {\r\n            loadGames();\r\n            addToPanel();\r\n        } else if (result == JOptionPane.NO_OPTION) {\r\n            addToPanel();\r\n        }\r\n        amountOfGames.setBounds(10, 400, 200, 20);\r\n    }\r\n\r\n    //EFFECTS: implements button guis for adding color.\r\n    public void colorStuff() {\r\n        currentColor.setBounds(350, 10, 50, 20);\r\n        colorLabel.setBounds(2, 10, 200, 20);\r\n        whitebutton.setBounds(180, 10, 70, 20);\r\n        whitebutton.addActionListener(this);\r\n        blackbutton.setBounds(260, 10, 70,20);\r\n        blackbutton.addActionListener(this);\r\n\r\n        panel.add(colorLabel);\r\n        panel.add(whitebutton);\r\n        panel.add(blackbutton);\r\n        panel.add(currentColor);\r\n    }\r\n\r\n    //EFFECTS: implements button guis for adding openings.\r\n    public void openingStuff() {\r\n        myOpeningLabel.setBounds(2, 70, 200, 20);\r\n        inputMyOpening.setBounds(10, 100, 250, 20);\r\n        theirOpeningLabel.setBounds(2, 130, 300, 20);\r\n        inputTheirOpening.setBounds(10, 160, 250, 20);\r\n\r\n        panel.add(myOpeningLabel);\r\n        panel.add(inputMyOpening);\r\n        panel.add(theirOpeningLabel);\r\n        panel.add(inputTheirOpening);\r\n    }\r\n\r\n    //EFFECTS: implements button guis for adding result.\r\n    public void resultStuff() {\r\n        currentResult.setBounds(250, 220, 50, 20);\r\n        wonbutton.setBounds(10, 220, 70, 20);\r\n        wonbutton.addActionListener(this);\r\n        lostbutton.setBounds(80, 220, 70, 20);\r\n        lostbutton.addActionListener(this);\r\n        drewbutton.setBounds(150, 220, 70, 20);\r\n        drewbutton.addActionListener(this);\r\n        resultLabel.setBounds(2, 190, 200, 20);\r\n\r\n        panel.add(resultLabel);\r\n        panel.add(wonbutton);\r\n        panel.add(lostbutton);\r\n        panel.add(drewbutton);\r\n        panel.add(currentResult);\r\n    }\r\n\r\n    //EFFECTS: implements guis for removing games.\r\n    public void removeStuff() {\r\n        removeLabel.setBounds(500, 10, 100, 20);\r\n        removeText.setBounds(500, 50, 50, 20);\r\n        removebutton.setBounds(500, 100, 150, 20);\r\n        removebutton.addActionListener(this);\r\n        message2.setBounds(500, 130, 150, 20);\r\n\r\n        panel.add(removeLabel);\r\n        panel.add(removeText);\r\n        panel.add(removebutton);\r\n        panel.add(message2);\r\n    }\r\n\r\n    //  //EFFECTS: implements guis for main panel. Runs the method for viewing games.\r\n    public void addToPanel() {\r\n        gameListStuff();\r\n        panel.setLayout(null);\r\n        panel.add(confirmbutton);\r\n        panel.add(message);\r\n        amountOfGames.setText(\"you've played \" + gl.length() + \" Games so far\");\r\n        panel.add(amountOfGames);\r\n\r\n        frame.add(panel);\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    //EFFECTS: implements system for viewing all games in the list.\r\n    public void gameListStuff() {\r\n\r\n        int count = 0;\r\n        LinkedList<Game> list = gl.getList();\r\n\r\n        for (Game g : list) {\r\n            count = count + 1;\r\n            l1.addElement(\"Game\" + count + \": played as \" + g.getColor() + \", played \" + g.getMyOpening()\r\n                    + \" against \" + g.getTheirOpening() + \". \" + g.getResult());\r\n        }\r\n        myGamelist = new JList<>(l1);\r\n\r\n        gamesPanel.setLayout(new BoxLayout(gamesPanel, BoxLayout.PAGE_AXIS));\r\n        JScrollPane scrollPane = new JScrollPane();\r\n        scrollPane.setViewportView(myGamelist);\r\n        myGamelist.setLayoutOrientation(JList.VERTICAL);\r\n        gamesPanel.add(new JLabel(\"List of all games\"));\r\n        gamesPanel.setBounds(400, 400, 450, 300);\r\n        gamesPanel.add(scrollPane);\r\n        panel.add(gamesPanel);\r\n    }\r\n\r\n    public void imageStuff() {\r\n        chessImage = new ImageIcon(\"./data/chess.jpg\");\r\n        chessImage.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);\r\n        JLabel imageLabel = new JLabel();\r\n        imageLabel.setIcon(chessImage);\r\n        imageLabel.setBounds(20, 400, 400, 500);\r\n        panel.add(imageLabel);\r\n    }\r\n\r\n\r\n    //Empty method that is needed for actionlistner.\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n    }\r\n\r\n    //EFFECTS: checks if all inputs are properly filled in before proceeding to adding games.\r\n    public void confirmAction() {\r\n        myOpening = inputMyOpening.getText();\r\n        theirOpening = inputTheirOpening.getText();\r\n\r\n        if (currentColor.getText() == \"none\" || inputMyOpening.getText().isEmpty()\r\n                || inputTheirOpening.getText().isEmpty() || currentResult.getText() == \"none\") {\r\n            message.setText(\"Please input all values\");\r\n        } else {\r\n            addToSystem();\r\n            message.setText(\"\");\r\n            currentColor.setText(\"none\");\r\n            currentResult.setText(\"none\");\r\n        }\r\n    }\r\n\r\n    //EFFECTS: checks if all inputs are properly filled in before proceeding to removing games.\r\n    public void confirmRemove() {\r\n\r\n        try {\r\n            removingNumber = Integer.parseInt(removeText.getText());\r\n        } catch (NumberFormatException e) {\r\n            message2.setText(\"That game doesn't exist.\");\r\n        }\r\n\r\n        try {\r\n            if (!gl.checkIndex(removingNumber) || removeText.getText().isEmpty()) {\r\n                message2.setText(\"That game doesn't exist.\");\r\n            } else {\r\n                removeFromSystem();\r\n                message2.setText(\"\");\r\n            }\r\n        } catch (IndexOutOfBoundsException e) {\r\n            message2.setText(\"That game doesn't exist.\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: Adds game to the list.\r\n    public void addToSystem() {\r\n        game = new Game(color, myOpening, theirOpening, result);\r\n        gl.addGame(game);\r\n        amountOfGames.setText(\"you've played \" + gl.length() + \" Games so far\");\r\n\r\n        //l1.addElement(\"Game\" + gl.length() + \": played as \" + color + \", played \" + myOpening\r\n          //      + \" against \" + theirOpening + \". \" + result);\r\n\r\n        l1.clear();\r\n        int count = 0;\r\n        LinkedList<Game> list = gl.getList();\r\n\r\n        for (Game g : list) {\r\n            count = count + 1;\r\n            l1.addElement(\"Game\" + count + \": played as \" + g.getColor() + \", played \" + g.getMyOpening()\r\n                    + \" against \" + g.getTheirOpening() + \". \" + g.getResult());\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //EFFECTS: removes game from the list.\r\n    public void removeFromSystem() {\r\n        gl.removeGame(removingNumber);\r\n        amountOfGames.setText(\"you've played \" + gl.length() + \" Games so far\");\r\n        //l1.removeElementAt(removingNumber - 1);\r\n\r\n        l1.clear();\r\n        int count = 0;\r\n        LinkedList<Game> list = gl.getList();\r\n\r\n        for (Game g : list) {\r\n            count = count + 1;\r\n            l1.addElement(\"Game\" + count + \": played as \" + g.getColor() + \", played \" + g.getMyOpening()\r\n                    + \" against \" + g.getTheirOpening() + \". \" + g.getResult());\r\n        }\r\n\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: loads GameList from file\r\n    private void loadGames() {\r\n        try {\r\n            gl = jsonReader.read();\r\n            System.out.println(\"Successfully Loaded \" + gl.getName() + \" from \" + JSON_STORE);\r\n        } catch (IOException e) {\r\n            System.out.println(\"Unable to read from file: \" + JSON_STORE);\r\n        }\r\n    }\r\n\r\n\r\n    // EFFECTS: saves the GameList to file\r\n    private void saveGameList() {\r\n        try {\r\n            jsonWriter.open();\r\n            jsonWriter.write(gl);\r\n            jsonWriter.close();\r\n            System.out.println(\"Successfully Saved \" + gl.getName() + \" to \" + JSON_STORE);\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"Unable to write to file: \" + JSON_STORE);\r\n        }\r\n    }\r\n\r\n    // EFFECTS: prints the log to the console\r\n    private void printLog(EventLog el) {\r\n        for (Event next : el) {\r\n            System.out.println(next.toString() + \"\\n\\n\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/GuiOpeningAnalyzer.java b/src/main/ui/GuiOpeningAnalyzer.java
--- a/src/main/ui/GuiOpeningAnalyzer.java	(revision 20097c0164ec6a450c29ac90892544fe25809702)
+++ b/src/main/ui/GuiOpeningAnalyzer.java	(date 1681435662521)
@@ -386,11 +386,6 @@
             System.out.println(next.toString() + "\n\n");
         }
     }
-
-
-
-
-
 }
 
 
Index: src/main/ui/OpeningsAnalyzer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport model.Game;\r\nimport model.GameList;\r\nimport persistence.JsonReader;\r\nimport persistence.JsonWriter;\r\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.util.LinkedList;\r\nimport java.util.Scanner;\r\n\r\n//runs the UI of the project. Implements user input and interface for user.\r\npublic class OpeningsAnalyzer {\r\n\r\n    Scanner input;\r\n    Scanner input2;  //made 2 scanners because there was a bug in some methods when using 1\r\n    private GameList gl;\r\n    private Game game;\r\n    private String color;\r\n    private String myOpening;\r\n    private String theirOpening;\r\n    private String result;\r\n\r\n    private static final String JSON_STORE = \"./data/myFile.json\";\r\n    private JsonWriter jsonWriter;\r\n    private JsonReader jsonReader;\r\n\r\n\r\n    // EFFECTS: runs the OpeningAnalyzer\r\n    public OpeningsAnalyzer() {\r\n\r\n        input = new Scanner(System.in);\r\n        input2 = new Scanner(System.in);\r\n\r\n        jsonWriter = new JsonWriter(JSON_STORE);\r\n        jsonReader = new JsonReader(JSON_STORE);\r\n\r\n        gl = new GameList(\"Users' Games\");\r\n        runOpeningsAnalyzer();\r\n    }\r\n\r\n    // EFFECTS: initializes gameList, and introduces the user to the application\r\n    public void runOpeningsAnalyzer() {\r\n        System.out.println(\"_________________________________________________________________________________________\");\r\n        System.out.println(\"_________________________________________________________________________________________\");\r\n        System.out.println(\"Hello! Welcome to the chess opening analyzer. With this application, you can manually add\");\r\n        System.out.println(\"chess games that you have played, and see various statistics on your openings.\");\r\n        System.out.println(\"_________________________________________________________________________________________\");\r\n        System.out.println(\"_________________________________________________________________________________________\");\r\n        startUp();\r\n    }\r\n\r\n    private void startUp() {\r\n        System.out.println(\"Would you like to load up your previous games?\");\r\n        System.out.println(\"enter 'y' if you would like to, 'n' if not.\");\r\n        String choice1 = input.nextLine();\r\n\r\n        while (!((choice1.equals(\"y\")) || (choice1.equals(\"n\")))) {\r\n            System.out.println(\"That's not a valid input, please try again.\");\r\n            choice1 = input.nextLine();\r\n        }\r\n\r\n        if (choice1.equals(\"y\")) {\r\n            loadWorkRoom();\r\n            menu();\r\n        } else {\r\n            menu();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //EFFECTS: shows the user the option menu\r\n    public void options() {\r\n        System.out.println(\"What would you like to do?\");\r\n        System.out.println(\"Type 'a' to add game,\");\r\n        System.out.println(\"Type 'b' to view all games,\");\r\n        System.out.println(\"Type 'c' to view your statistics,\");\r\n        System.out.println(\"Type 'q' to quit or start over.\");\r\n    }\r\n\r\n    //EFFECTS: shows user how many games were played, and also takes user input for what they wanna do\r\n    public void menu() {\r\n        System.out.println(\"\");\r\n        System.out.println(\"Currently, you have played \" + gl.length() + \" games.\");\r\n        options();\r\n        String choice2 = input.nextLine();\r\n\r\n        while (!((choice2.equals(\"a\")) || (choice2.equals(\"b\")) || (choice2.equals(\"c\")) || (choice2.equals(\"q\")))) {\r\n            System.out.println(\"That's not a valid input, please try again.\");\r\n            choice2 = input.nextLine();\r\n        }\r\n\r\n        if (choice2.equals(\"a\")) {\r\n            System.out.println(\"You're now adding a game to the system.\");\r\n            pickedAddGame();\r\n        } else if (choice2.equals(\"b\")) {\r\n            System.out.println(\"You are now viewing all your games.\");\r\n            viewGames();\r\n        } else if (choice2.equals(\"c\")) {\r\n            System.out.println(\"You are now viewing your statistics.\");\r\n            pickedViewStats();\r\n        } else {\r\n            System.out.println(\"You are now quitting.\");\r\n            quit();\r\n        }\r\n    }\r\n\r\n    //EFFECTS: takes the user input for game.\r\n    public void pickedAddGame() {\r\n        System.out.println(\"What color did you play as?\");\r\n        System.out.println(\"Choices are 'white' or 'black'.\");\r\n        color = input.nextLine();\r\n\r\n        while (!(color.equals(\"white\") || color.equals(\"black\"))) {\r\n            System.out.println(\"That's not a valid color, please try again.\");\r\n            color = input.nextLine();\r\n        }\r\n\r\n        System.out.println(\"What opening did you use?\");\r\n        myOpening = input.nextLine();\r\n\r\n        System.out.println(\"What opening did your opponent play?\");\r\n        theirOpening = input.nextLine();\r\n\r\n        System.out.println(\"Did you win, lose, or draw?\");\r\n        System.out.println(\"Choices are 'won', 'lost', or 'drew'\");\r\n        result = input.nextLine();\r\n\r\n        while (!(result.equals(\"won\") || result.equals(\"lost\") || result.equals(\"drew\"))) {\r\n            System.out.println(\"That's not a valid result, please try again.\");\r\n            result = input.nextLine();\r\n        }\r\n        System.out.println(\"\");\r\n        System.out.println(\"You've now successfully added your game.\");\r\n\r\n        nowAddGame();\r\n\r\n    }\r\n\r\n\r\n    //EFFECTS: makes a new game based on the user input and adds it to the GameList.\r\n    public void nowAddGame() {\r\n        game = new Game(color, myOpening, theirOpening, result);\r\n        gl.addGame(game);\r\n        System.out.println(\"Would you like to keep adding or go back to menu?\");\r\n        System.out.println(\"Type 'a' to keep adding or 'm' to go back.\");\r\n        whatNext();\r\n\r\n    }\r\n\r\n    //EFFECTS: asks user if they wanna keep adding or go back to menu\r\n    public void whatNext() {\r\n        String choice3 = input.nextLine();;\r\n\r\n        while (!(choice3.equals(\"a\") || choice3.equals(\"m\"))) {\r\n            System.out.println(\"That's not a valid input, please try again.\");\r\n            choice3 = input.nextLine();\r\n        }\r\n\r\n        if (choice3.equals(\"a\")) {\r\n            pickedAddGame();\r\n        } else {\r\n            System.out.println(\"\");\r\n            menu();\r\n        }\r\n    }\r\n\r\n\r\n    //EFFECTS: shows the user all the games that are in the GameList so far\r\n    public void viewGames() {\r\n        System.out.println(\"----------------------------------------------------------------------------------------\");\r\n        System.out.println(\"Your games:\");\r\n        System.out.println(\"\");\r\n        int count = 0;\r\n        LinkedList<Game> list = gl.getList();\r\n\r\n        for (Game g : list) {\r\n            count = count + 1;\r\n            System.out.println(\"Game\" + count + \": played as \" + g.getColor() + \", played \" + g.getMyOpening()\r\n                    + \" against \" + g.getTheirOpening() + \". \" + g.getResult());\r\n        }\r\n        System.out.println(\"----------------------------------------------------------------------------------------\");\r\n        removeOrGoBack();\r\n    }\r\n\r\n    //EFFECTS: asks user if they want to remove a game or go back\r\n    public void removeOrGoBack() {\r\n        System.out.println(\"Type 'm' to go back to menu. \");\r\n        System.out.println(\"If you would like to remove a game, type r.\");\r\n        String choice4 = input.nextLine();\r\n\r\n        while (!(choice4.equals(\"m\") || choice4.equals(\"r\"))) {\r\n            System.out.println(\"That's not a valid input, please try again.\");\r\n            choice4 = input.nextLine();\r\n        }\r\n\r\n        if (choice4.equals(\"m\")) {\r\n            menu();\r\n        } else {\r\n            System.out.println(\"You are now removing a game from the list.\");\r\n            remove();\r\n        }\r\n    }\r\n\r\n    //EFFECTS: asks user on what game they want to remove, or if they wanna cancel\r\n    public void remove() {\r\n        int n;\r\n\r\n        do {\r\n            System.out.println(\"Type the game number of the game you would like to remove.\");\r\n            System.out.println(\"If you would like to cancel, type 0.\");\r\n            n = input2.nextInt();\r\n\r\n            if (!(gl.checkIndex(n))) {\r\n                System.out.println(\"That game does not exist.\");\r\n            }\r\n        } while (!(gl.checkIndex(n)));\r\n\r\n\r\n        if (n == 0) {\r\n            System.out.println(\"Cancelled removing game.\");\r\n            viewGames();\r\n        } else {\r\n            gl.removeGame(n);\r\n            System.out.println(\"You have removed game\" + n + \".\");\r\n            viewGames();\r\n        }\r\n    }\r\n\r\n    //EFFECTS: shows the user the overall winrate, and asks if they want to go back to menu or see specific win rates\r\n    public void pickedViewStats() {\r\n        System.out.println(\"Your current overall winrate is \" + gl.ovrlWinRate() + \"%.\");\r\n        System.out.println(\"If you would like to check your win rate with your specific opening, type 'a'.\");\r\n        System.out.println(\"If you would like to check your win rate against a  specific opening, type 'b'.\");\r\n        System.out.println(\"Type m to go back to menu.\");\r\n        String choice5 = input.nextLine();\r\n\r\n        while (!(choice5.equals(\"a\") || choice5.equals(\"b\") || choice5.equals(\"m\"))) {\r\n            System.out.println(\"That's not a valid input, please try again.\");\r\n            choice5 = input.nextLine();\r\n        }\r\n\r\n        if (choice5.equals(\"a\")) {\r\n            myOpeningWR();\r\n        } else if (choice5.equals(\"b\")) {\r\n            theirOpeningWR();\r\n        } else {\r\n            menu();\r\n        }\r\n    }\r\n\r\n    //EFFECTS: shows the user the win rate for the opening given.\r\n    public void myOpeningWR() {\r\n        System.out.println(\"Type the opening that you played you want to see the win rate of.\");\r\n        String n = input.nextLine();\r\n        System.out.println(\"Your win rate with \" + n + \" is \" + gl.myOpeningWinRate(n) + \"%.\");\r\n        afterMWR();\r\n    }\r\n\r\n    //EFFECTS: asks user if they want to check win rates for other openings or go back\r\n    public void afterMWR() {\r\n        System.out.println(\"If you would like to check win rates with other openings, type 'a'.\");\r\n        System.out.println(\"If you would like to go back to statistics menu, type 's'.\");\r\n        String choice6 = input.nextLine();\r\n\r\n        while (!(choice6.equals(\"a\") || choice6.equals(\"s\"))) {\r\n            System.out.println(\"That's not a valid input, please try again.\");\r\n            choice6 = input.nextLine();\r\n        }\r\n\r\n        if (choice6.equals(\"a\")) {\r\n            myOpeningWR();\r\n        } else {\r\n            pickedViewStats();\r\n        }\r\n    }\r\n\r\n    //EFFECTS: shows the user the win rate against the opening given.\r\n    public void theirOpeningWR() {\r\n        System.out.println(\"Type the opening that you played against which you want to see the win rate of.\");\r\n        String n = input.nextLine();\r\n        System.out.println(\"Your win rate against \" + n + \" is \" + gl.theirOpeningWinRate(n) + \"%.\");\r\n        afterTWR();\r\n    }\r\n\r\n    //EFFECTS: asks user if they want to check win rates against other openings or go back\r\n    public void afterTWR() {\r\n        System.out.println(\"If you would like to check win rates against other openings, type 'a'.\");\r\n        System.out.println(\"If you would like to go back to statistics menu, type 's'.\");\r\n        String choice7 = input.nextLine();\r\n\r\n        while (!(choice7.equals(\"a\") || choice7.equals(\"s\"))) {\r\n            System.out.println(\"That's not a valid input, please try again.\");\r\n            choice7 = input.nextLine();\r\n        }\r\n\r\n        if (choice7.equals(\"a\")) {\r\n            theirOpeningWR();\r\n        } else {\r\n            pickedViewStats();\r\n        }\r\n    }\r\n\r\n    //Tells user that the input was not valid\r\n    public void pickNotValid() {\r\n        System.out.println(\"That input is not valid.\");\r\n        menu();\r\n    }\r\n\r\n    //EFFECTS: prompts user if they want to save the GameList to the file\r\n    public void quit() {\r\n        System.out.println(\"Would you like to save your changes to file?\");\r\n        System.out.println(\"enter 'y' if you would like to, 'n' if not.\");\r\n        String choice8 = input.nextLine();\r\n\r\n        while (!(choice8.equals(\"y\") || choice8.equals(\"n\"))) {\r\n            System.out.println(\"That's not a valid input, please try again.\");\r\n            choice8 = input.nextLine();\r\n        }\r\n\r\n        if (choice8.equals(\"y\")) {\r\n            saveGameList();\r\n            System.out.println(\"Thank you for using the chess opening analyzer!\");\r\n        } else {\r\n            System.out.println(\"Thank you for using the chess opening analyzer!\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: loads GameList from file\r\n    private void loadWorkRoom() {\r\n        try {\r\n            gl = jsonReader.read();\r\n            System.out.println(\"Successfully Loaded \" + gl.getName() + \" from \" + JSON_STORE);\r\n        } catch (IOException e) {\r\n            System.out.println(\"Unable to read from file: \" + JSON_STORE);\r\n        }\r\n    }\r\n\r\n    // EFFECTS: saves the GameList to file\r\n    private void saveGameList() {\r\n        try {\r\n            jsonWriter.open();\r\n            jsonWriter.write(gl);\r\n            jsonWriter.close();\r\n            System.out.println(\"Successfully Saved \" + gl.getName() + \" to \" + JSON_STORE);\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"Unable to write to file: \" + JSON_STORE);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/OpeningsAnalyzer.java b/src/main/ui/OpeningsAnalyzer.java
--- a/src/main/ui/OpeningsAnalyzer.java	(revision 20097c0164ec6a450c29ac90892544fe25809702)
+++ b/src/main/ui/OpeningsAnalyzer.java	(date 1681435662522)
@@ -354,6 +354,4 @@
     }
 
 
-
-
 }
